{"ast":null,"code":"// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { encode } from 'jwt-simple';\nimport { expiredToken } from '@daml/react';\nimport { ledgerId } from './config';\nexport const APPLICATION_ID = 'da-marketplace'; // NOTE: This is for testing purposes only.\n// To handle authentication properly,\n// see https://docs.daml.com/app-dev/authentication.html.\n\nexport const SECRET_KEY = 'secret';\n\nfunction isCredentials(credentials) {\n  return typeof credentials.party === 'string' && typeof credentials.token === 'string' && typeof credentials.ledgerId === 'string';\n}\n\nconst CREDENTIALS_STORAGE_KEY = 'credentials';\nexport function storeCredentials(credentials) {\n  localStorage.setItem(CREDENTIALS_STORAGE_KEY, JSON.stringify(credentials));\n}\nexport function retrieveCredentials() {\n  const credentialsJson = localStorage.getItem(CREDENTIALS_STORAGE_KEY);\n\n  if (!credentialsJson) {\n    return undefined;\n  }\n\n  try {\n    const credentials = JSON.parse(credentialsJson);\n    console.log(isCredentials(credentials));\n    console.log(expiredToken(credentials.token));\n\n    if (isCredentials(credentials) && !expiredToken(credentials.token)) {\n      return credentials;\n    }\n  } catch {\n    console.error(\"Could not parse credentials: \", credentialsJson);\n  }\n\n  return undefined;\n}\n\nfunction computeToken(party) {\n  const payload = {\n    \"https://daml.com/ledger-api\": {\n      \"ledgerId\": ledgerId,\n      \"applicationId\": APPLICATION_ID,\n      \"actAs\": [party]\n    }\n  };\n  return encode(payload, SECRET_KEY, 'HS256');\n}\n\nexport const computeCredentials = party => {\n  const token = computeToken(party);\n  return {\n    party,\n    token,\n    ledgerId\n  };\n};","map":{"version":3,"sources":["/Users/sarahbreckenridge/diversity-index/app/ui/src/Credentials.ts"],"names":["encode","expiredToken","ledgerId","APPLICATION_ID","SECRET_KEY","isCredentials","credentials","party","token","CREDENTIALS_STORAGE_KEY","storeCredentials","localStorage","setItem","JSON","stringify","retrieveCredentials","credentialsJson","getItem","undefined","parse","console","log","error","computeToken","payload","computeCredentials"],"mappings":"AAAA;AACA;AAEA,SAASA,MAAT,QAAuB,YAAvB;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,SAASC,QAAT,QAAyB,UAAzB;AAEA,OAAO,MAAMC,cAAsB,GAAG,gBAA/B,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,UAAkB,GAAG,QAA3B;;AAQP,SAASC,aAAT,CAAuBC,WAAvB,EAAqE;AACnE,SAAO,OAAOA,WAAW,CAACC,KAAnB,KAA6B,QAA7B,IACA,OAAOD,WAAW,CAACE,KAAnB,KAA6B,QAD7B,IAEA,OAAOF,WAAW,CAACJ,QAAnB,KAAgC,QAFvC;AAGD;;AAED,MAAMO,uBAAuB,GAAG,aAAhC;AAEA,OAAO,SAASC,gBAAT,CAA0BJ,WAA1B,EAA2D;AAChEK,EAAAA,YAAY,CAACC,OAAb,CAAqBH,uBAArB,EAA8CI,IAAI,CAACC,SAAL,CAAeR,WAAf,CAA9C;AACD;AAED,OAAO,SAASS,mBAAT,GAAwD;AAC7D,QAAMC,eAAe,GAAGL,YAAY,CAACM,OAAb,CAAqBR,uBAArB,CAAxB;;AAEA,MAAI,CAACO,eAAL,EAAsB;AACpB,WAAOE,SAAP;AACD;;AAED,MAAI;AACF,UAAMZ,WAAW,GAAGO,IAAI,CAACM,KAAL,CAAWH,eAAX,CAApB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYhB,aAAa,CAACC,WAAD,CAAzB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYpB,YAAY,CAACK,WAAW,CAACE,KAAb,CAAxB;;AACA,QAAIH,aAAa,CAACC,WAAD,CAAb,IAA8B,CAACL,YAAY,CAACK,WAAW,CAACE,KAAb,CAA/C,EAAoE;AAClE,aAAOF,WAAP;AACD;AACF,GAPD,CAOE,MAAM;AACNc,IAAAA,OAAO,CAACE,KAAR,CAAc,+BAAd,EAA+CN,eAA/C;AACD;;AAED,SAAOE,SAAP;AACD;;AAED,SAASK,YAAT,CAAsBhB,KAAtB,EAA6C;AAC3C,QAAMiB,OAAO,GAAG;AACd,mCAA+B;AAC7B,kBAAYtB,QADiB;AAE7B,uBAAiBC,cAFY;AAG7B,eAAS,CAACI,KAAD;AAHoB;AADjB,GAAhB;AAOA,SAAOP,MAAM,CAACwB,OAAD,EAAUpB,UAAV,EAAsB,OAAtB,CAAb;AACD;;AAED,OAAO,MAAMqB,kBAAkB,GAAIlB,KAAD,IAAgC;AAChE,QAAMC,KAAK,GAAGe,YAAY,CAAChB,KAAD,CAA1B;AACA,SAAO;AAACA,IAAAA,KAAD;AAAQC,IAAAA,KAAR;AAAeN,IAAAA;AAAf,GAAP;AACD,CAHM","sourcesContent":["// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { encode } from 'jwt-simple'\nimport { expiredToken } from '@daml/react'\n\nimport { ledgerId } from './config'\n\nexport const APPLICATION_ID: string = 'da-marketplace';\n\n// NOTE: This is for testing purposes only.\n// To handle authentication properly,\n// see https://docs.daml.com/app-dev/authentication.html.\nexport const SECRET_KEY: string = 'secret';\n\nexport type Credentials = {\n  party: string;\n  token: string;\n  ledgerId: string;\n}\n\nfunction isCredentials(credentials: any): credentials is Credentials {\n  return typeof credentials.party === 'string' &&\n         typeof credentials.token === 'string' &&\n         typeof credentials.ledgerId === 'string'\n}\n\nconst CREDENTIALS_STORAGE_KEY = 'credentials';\n\nexport function storeCredentials(credentials?: Credentials): void {\n  localStorage.setItem(CREDENTIALS_STORAGE_KEY, JSON.stringify(credentials));\n}\n\nexport function retrieveCredentials(): Credentials | undefined {\n  const credentialsJson = localStorage.getItem(CREDENTIALS_STORAGE_KEY);\n\n  if (!credentialsJson) {\n    return undefined;\n  }\n\n  try {\n    const credentials = JSON.parse(credentialsJson);\n    console.log(isCredentials(credentials))\n    console.log(expiredToken(credentials.token))\n    if (isCredentials(credentials) && !expiredToken(credentials.token)) {\n      return credentials;\n    }\n  } catch {\n    console.error(\"Could not parse credentials: \", credentialsJson);\n  }\n\n  return undefined;\n}\n\nfunction computeToken(party: string): string {\n  const payload = {\n    \"https://daml.com/ledger-api\": {\n      \"ledgerId\": ledgerId,\n      \"applicationId\": APPLICATION_ID,\n      \"actAs\": [party]\n    }\n  };\n  return encode(payload, SECRET_KEY, 'HS256');\n}\n\nexport const computeCredentials = (party: string): Credentials => {\n  const token = computeToken(party);\n  return {party, token, ledgerId};\n}\n\nexport default Credentials;\n"]},"metadata":{},"sourceType":"module"}